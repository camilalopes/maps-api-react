{"version":3,"sources":["components/List.js","utils/credentials.js","App.js","utils/foursquareAPI.js","serviceWorker.js","index.js"],"names":["List","_this","this","react_default","a","createElement","className","props","markers","map","marker","index","key","role","tabIndex","onClick","name","Component","FS_CLIENT_ID","App","state","showingInfoWindow","center","lat","lng","activeMarkers","activeMarker","id","address","position","icon","query","onMarkerClick","selectedMarker","find","m","setTimeout","setState","onClose","updateQuery","searchMarker","filter","toLowerCase","indexOf","_this2","mapCenter","requestURL","concat","fetch","then","data","ok","json","response","venues","getFSVenues","fitIntoMarkers","catch","err","console","log","forEach","venue","location","push","_this3","dist","google","zoom","initialCenter","parseFloat","visible","index_es","menuOpenButton","menuCloseButton","changeMenuOn","largeMenuClassName","smallMenuClassName","menu","type","placeholder","value","onChange","event","target","components_List","GoogleApiWrapper","apiKey","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+OAwBeA,mLApBL,IAAAC,EAAAC,KACN,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACXJ,KAAKK,MAAMC,QAAQC,IAAI,SAACC,EAAQC,GAAT,OACtBR,EAAAC,EAAAC,cAAA,MAAIO,IAAKD,GACPR,EAAAC,EAAAC,cAAA,OAAKQ,KAAK,SAASC,SAAS,IAAIR,UAAU,aACxCS,QAAS,kBAAMd,EAAKM,MAAMQ,QAAQL,KACjCA,EAAOM,iBARHC,aCFNC,EAAe,2DCMtBC,6MAEJC,MAAQ,CACNC,mBAAmB,EACnBC,OAAQ,CAACC,IAAK,OAAQC,KAAM,SAC5BhB,QAAS,GACTiB,cAAe,GACfC,aAAc,CACZC,GAAI,GACJC,QAAS,GACTC,SAAU,CAACN,IAAK,GAAIC,IAAK,IACzBR,KAAM,GACNc,KAAM,IAERC,MAAO,MAGTC,cAAgB,SAACtB,GACf,IAAIuB,EAAiBhC,EAAKmB,MAAMZ,QAAQ0B,KAAM,SAAAC,GAAC,OAAIA,EAAER,KAAOjB,EAAOiB,KACnEM,EAAeH,KAAO,uDACtBM,WAAW,kBAAMH,EAAeH,KAAO,yDAAyD,KAChG7B,EAAKoC,SAAS,CACZX,aAAchB,EACdW,mBAAmB,OAIvBiB,QAAU,WACJrC,EAAKmB,MAAMC,mBACbpB,EAAKoC,SAAS,CACZhB,mBAAmB,OAKzBkB,YAAc,SAACR,GACb9B,EAAKoC,SAAS,CAAEN,UAChB9B,EAAKuC,aAAaT,MAGpBS,aAAe,SAACT,GACd9B,EAAKoC,SAAS,CACZZ,cAAexB,EAAKmB,MAAMZ,QAAQiC,OAAO,SAAA/B,GAAM,OAC/CA,EAAOM,KAAK0B,cAAcC,QAAQZ,EAAMW,gBAAkB,0FAI5C,IAAAE,EAAA1C,MC/CO,SAAC2C,GAC1B,IAAMC,EAAU,GAAAC,OANN,wCAMM,cAAAA,OAAuBF,EAAUtB,IAAjC,MAAAwB,OAA2CF,EAAUrB,IAArD,qBAAAuB,OACD7B,EADC,mBAAA6B,OFNc,mDEMd,OAAAA,OALN,WAKM,iBAAAA,OAHA,OAGA,WAAAA,OAJN,IAQV,OAAQC,MAAMF,GACXG,KAAK,SAAAC,GACJ,GAAKA,EAAKC,GAEH,OAAOD,EAAKE,OADjB,MAAMF,IAGTD,KAAK,SAAAC,GACJ,OAAQA,EAAKG,SAASC,UDqCzBC,CAAYrD,KAAKkB,MAAME,QACpB2B,KAAK,SAAAK,GACJ,IAAI9C,EAAUoC,EAAKY,eAAeF,GAClCV,EAAKP,SAAS,CAAE7B,QAASA,IACzBoC,EAAKP,SAAS,CAACZ,cAAejB,MAC7BiD,MAAM,SAAAC,GACPC,QAAQC,IAAIF,4CAKHJ,GACb,IACI5C,EADAF,EAAU,GA8Bd,OA3BA8C,EAAOO,QAAQ,SAAAC,GACb,IAAIjC,EAAW,CACbN,IAAKuC,EAAMC,SAASxC,IACpBC,IAAKsC,EAAMC,SAASvC,KAGtBd,EAAS,CAIPkB,QAASkC,EAAMC,SAASnC,QACxBC,WACAb,KAAM8C,EAAM9C,KACZW,GAAImC,EAAMnC,GACVG,KAAM,yDAWPtB,EAAQwD,KAAKtD,KAETF,mCAGC,IAAAyD,EAAA/D,KAEP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC6D,EAAA,IAAD,CACEC,OAAQjE,KAAKK,MAAM4D,OACnBC,KAAM,GACNC,cAAenE,KAAKkB,MAAME,QAGzBpB,KAAKkB,MAAMK,cAAchB,IAAI,SAACC,EAAQC,GACrC,OAAOR,EAAAC,EAAAC,cAAC6D,EAAA,OAAD,CAAQnD,QAASkD,EAAKjC,cAC3BL,GAAIjB,EAAOiB,GACXC,QAASlB,EAAOkB,QAChBhB,IAAKD,EACLmB,KAAMpB,EAAOoB,KACbD,SAAUnB,EAAOmB,SACjBb,KAAMN,EAAOM,SAGjBb,EAAAC,EAAAC,cAAC6D,EAAA,WAAD,CAEErC,SAAU,CAACN,IAAK+C,WAAWpE,KAAKkB,MAAMM,aAAaG,SAASN,KAAK+C,WAAW,MAC1E9C,IAAK8C,WAAWpE,KAAKkB,MAAMM,aAAaG,SAASL,MACnD+C,QAASrE,KAAKkB,MAAMC,kBACpBiB,QAASpC,KAAKoC,SAEdnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKH,KAAKkB,MAAMM,aAAaV,MAC7Bb,EAAAC,EAAAC,cAAA,aAAKH,KAAKkB,MAAMM,aAAaE,QAA7B,SAMRzB,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CACEC,eAAgBtE,EAAAC,EAAAC,cAAA,QAAMsB,GAAG,cACzB+C,gBAAiBvE,EAAAC,EAAAC,cAAA,QAAMsB,GAAG,eAC1BgD,aAAa,QACbC,mBAAmB,WACnBC,mBAAmB,GACnBC,KAEE3E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,SAAO0E,KAAK,OAAOC,YAAY,yBAC7BC,MAAO/E,KAAKkB,MAAMW,MAClBmD,SAAU,SAACC,GAAD,OAAWlB,EAAK1B,YAAY4C,EAAMC,OAAOH,QACnDnE,SAAS,IACTD,KAAK,WAGPV,EAAAC,EAAAC,cAACgF,EAAD,CAAM7E,QAASN,KAAKkB,MAAMK,cACxBV,QAAS,SAACL,GACRuD,EAAKjC,cAActB,iBAtJnBO,aAiKHqE,6BAAiB,CAC9BC,ODpK4B,2CCmKfD,CAEZnE,GE9JGqE,EAAcC,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT7C,KAAK,SAAAkD,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjF,QACf4E,UAAUC,cAAcO,YAI1B7C,QAAQC,IACN,gHAKEmC,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBxC,QAAQC,IAAI,sCAGRmC,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,UAO5B1C,MAAM,SAAAkD,GACLhD,QAAQgD,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAO1G,EAAAC,EAAAC,cAACyG,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,kBAAwBxB,OAAO3B,SAASoD,MACpDC,SAAW1B,OAAO3B,SAASqD,OAIvC,OAGF1B,OAAO2B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAA/C,OAAMmE,kBAAN,sBAEP1B,GAgEV,SAAiCM,EAAOC,GAEtC/C,MAAM8C,GACH7C,KAAK,SAAAI,GAEJ,IAAMiE,EAAcjE,EAASkE,QAAQC,IAAI,gBAEnB,MAApBnE,EAASoE,QACO,MAAfH,IAA8D,IAAvCA,EAAY3E,QAAQ,cAG5CqD,UAAUC,cAAcyB,MAAMzE,KAAK,SAAAkD,GACjCA,EAAawB,aAAa1E,KAAK,WAC7ByC,OAAO3B,SAAS6D,aAKpB/B,EAAgBC,EAAOC,KAG1BtC,MAAM,WACLE,QAAQC,IACN,mEArFAiE,CAAwB/B,EAAOC,GAI/BC,UAAUC,cAAcyB,MAAMzE,KAAK,WACjCU,QAAQC,IACN,+GAMJiC,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.7bf052d5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass List extends Component {\r\n  render(){\r\n    return (\r\n      <ul className=\"venue-list\">\r\n        {this.props.markers.map((marker, index) => (\r\n          <li key={index}>\r\n            <div role=\"button\" tabIndex=\"0\" className=\"venue-item\"\r\n              onClick={() => this.props.onClick(marker)}>\r\n              {marker.name}\r\n            </div>\r\n          </li>))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nList.propTypes = {\r\n  markers: PropTypes.array.isRequired,\r\n  onClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default List;\r\n","//  Foursquare API keys\r\nexport const FS_CLIENT_ID = 'XC45SLP2PETGKNWV1UFQXSUJ0PNKIUVDQTX0IXOO3CFBGPSM';\r\nexport const FS_CLIENT_SECRET = '2TEPUANLKA4DIESECEK5T04GEDK31GID1IWJQ314O50VUOMU';\r\n\r\n//   Google Maps API key\r\nexport const GOOGLE_MAP_KEY = 'AIzaSyASTD9r6pWJjIKgNUaQ46sWcMnkF2Nh-T4';\r\n","import React, { Component } from 'react';\r\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\r\nimport List from './components/List'\r\nimport { getFSVenues, getVenueInfo } from \"./utils/foursquareAPI\";\r\nimport { GOOGLE_MAP_KEY } from \"./utils/credentials\";\r\nimport ResponsiveMenu from 'react-responsive-navbar';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    showingInfoWindow: false, //hides or show an Info Window\r\n    center: {lat: 49.285, lng: -123.134}, //map center position\r\n    markers: [], //all markers\r\n    activeMarkers: [], //just the active markers (filtered)\r\n    activeMarker: { //marker clicked\r\n      id: '',\r\n      address: '',\r\n      position: {lat: {}, lng: {}},\r\n      name: '',\r\n      icon: ''\r\n    },\r\n    query: '',\r\n  };\r\n\r\n  onMarkerClick = (marker) => {\r\n    let selectedMarker = this.state.markers.find( m => m.id === marker.id)\r\n    selectedMarker.icon = 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\r\n    setTimeout(() => selectedMarker.icon = 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png', 100)\r\n    this.setState({\r\n      activeMarker: marker,\r\n      showingInfoWindow: true\r\n    });\r\n  };\r\n\r\n  onClose = () => {\r\n    if (this.state.showingInfoWindow) {\r\n      this.setState({\r\n        showingInfoWindow: false\r\n      });\r\n    }\r\n  };\r\n\r\n  updateQuery = (query) => {\r\n    this.setState({ query })\r\n    this.searchMarker(query)\r\n  };\r\n\r\n  searchMarker = (query) => {\r\n    this.setState({\r\n      activeMarkers: this.state.markers.filter(marker =>\r\n      marker.name.toLowerCase().indexOf(query.toLowerCase()) > -1)\r\n    });\r\n  };\r\n\r\n componentDidMount(){\r\n   //get all the venues int the FS API and set the markers\r\n   getFSVenues(this.state.center)\r\n     .then(venues => {\r\n       let markers = this.fitIntoMarkers(venues)\r\n       this.setState({ markers: markers })\r\n       this.setState({activeMarkers: markers})\r\n     }).catch(err => {\r\n       console.log(err);\r\n     });\r\n\r\n }\r\n\r\n fitIntoMarkers(venues){\r\n   let markers = []\r\n   var marker\r\n\r\n   venues.forEach(venue => {\r\n     let position = {\r\n       lat: venue.location.lat,\r\n       lng: venue.location.lng\r\n     };\r\n\r\n     marker = {\r\n       //photo: '',\r\n       //rate: ,\r\n       //tel: '',\r\n       address: venue.location.address,\r\n       position,\r\n       name: venue.name,\r\n       id: venue.id,\r\n       icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\r\n     }\r\n\r\n    /* doesnt work well\r\n    getVenueInfo(venue.id)\r\n        .then(info => {\r\n          //rate = info.rating ? info.rating :  ''\r\n          //photo = info.bestPhoto? `${info.bestPhoto.prefix}width100${info.bestPhoto.suffix}` : ''\r\n          //tel = info.contact.formattedPhone ? info.contact.formattedPhone : ''\r\n        });*/\r\n\r\n      markers.push(marker)\r\n    })\r\n   return markers\r\n }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"map\">\r\n          <Map\r\n            google={this.props.google}\r\n            zoom={14}\r\n            initialCenter={this.state.center}\r\n          >\r\n\r\n            {this.state.activeMarkers.map((marker, index) => {\r\n              return <Marker onClick={this.onMarkerClick}\r\n                id={marker.id}\r\n                address={marker.address}\r\n                key={index}\r\n                icon={marker.icon}\r\n                position={marker.position}\r\n                name={marker.name} />\r\n            })}\r\n\r\n            <InfoWindow\r\n              //sum a value to lat to the window appears above the marker\r\n              position={{lat: parseFloat(this.state.activeMarker.position.lat)+parseFloat(0.002),\r\n                lng: parseFloat(this.state.activeMarker.position.lng)}}\r\n              visible={this.state.showingInfoWindow}\r\n              onClose={this.onClose}\r\n            >\r\n              <div>\r\n                <h4>{this.state.activeMarker.name}</h4>\r\n                <p> {this.state.activeMarker.address} </p>\r\n              </div>\r\n            </InfoWindow>\r\n          </Map>\r\n        </div>\r\n\r\n        <ResponsiveMenu\r\n          menuOpenButton={<span id=\"menu-open\"></span>}\r\n          menuCloseButton={<span id=\"menu-close\"></span>}\r\n          changeMenuOn=\"600px\"\r\n          largeMenuClassName=\"side-bar\"\r\n          smallMenuClassName=\"\"\r\n          menu={\r\n\r\n            <div className=\"side-bar\">\r\n              <h1> Vancouver Downtown </h1>\r\n              <h2> find a good place to eat </h2>\r\n              <input type=\"text\" placeholder=\"Search a location name\"\r\n                value={this.state.query}\r\n                onChange={(event) => this.updateQuery(event.target.value)}\r\n                tabIndex=\"0\"\r\n                role=\"search\"\r\n              />\r\n\r\n              <List markers={this.state.activeMarkers}\r\n                onClick={(marker) => {\r\n                  this.onMarkerClick(marker) }}\r\n              />\r\n\r\n            </div>\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: GOOGLE_MAP_KEY\r\n})(App);\r\n","import { FS_CLIENT_ID, FS_CLIENT_SECRET } from \"./credentials\";\r\n\r\nconst URL = \"https://api.foursquare.com/v2/venues/\";\r\nconst VER = \"20130619\";\r\nconst LIM = 15;\r\nconst CATEGORIE = 'Food'\r\n\r\nexport const getFSVenues = (mapCenter) => {\r\n  const requestURL = `${URL}search?ll=${ mapCenter.lat }, ${ mapCenter.lng }\r\n    &client_id=${FS_CLIENT_ID}&client_secret=${FS_CLIENT_SECRET}&v=${VER}\r\n    &query=${CATEGORIE}&limit=${LIM}`;\r\n\r\n  return (fetch(requestURL)\r\n    .then(data => {\r\n      if (!data.ok) {\r\n        throw data;\r\n      } else return data.json();\r\n    })\r\n    .then(data => {\r\n      return (data.response.venues);\r\n    })\r\n  );\r\n};\r\n\r\nexport const getVenueInfo = (venueId) => {\r\n  const VENUE_ID = venueId;\r\n  const requestURL = `${URL}${VENUE_ID}?client_id=${FS_CLIENT_ID}\r\n    &client_secret=${FS_CLIENT_SECRET}&v=${VER}`\r\n\r\n  return (fetch(requestURL)\r\n    .then(data => {\r\n      if(!data.ok){\r\n        throw data;\r\n      } else return data.json();\r\n    })\r\n    .then(data =>{\r\n      return (data.response.venue);\r\n    })\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}